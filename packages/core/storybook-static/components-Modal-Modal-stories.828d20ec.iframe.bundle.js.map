{"version":3,"file":"components-Modal-Modal-stories.828d20ec.iframe.bundle.js","mappings":";;;;;;;;;AAoBA;AACA;;;AAGA;AAIA;AAKA;;;AAIA;;;;;;;AAaA;;;;;;;ACrBA;;;;AAMA;;AAEA;;;;;AAKA;AAaA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;;AAIA","sources":["webpack://@enterprise/core/./src/components/Button/Button.tsx","webpack://@enterprise/core/./src/components/Modal/Modal.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport interface ButtonProps {\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n  children: React.ReactNode;\n  onClick?: () => void;\n}\n\nconst StyledButton = styled.button<{ $variant: string; $size: string }>`\n  font-family: 'Inter', system-ui, sans-serif;\n  font-weight: 500;\n  border-radius: 0.5rem;\n  border: 1px solid transparent;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  \n  /* Size styles */\n  padding: ${props => props.$size === 'sm' ? '0.5rem 0.75rem' : props.$size === 'lg' ? '1rem 1.5rem' : '0.75rem 1rem'};\n  font-size: ${props => props.$size === 'sm' ? '0.875rem' : props.$size === 'lg' ? '1.125rem' : '1rem'};\n  \n  /* Variant styles */\n  background-color: ${props => \n    props.$variant === 'secondary' ? '#f1f5f9' : \n    props.$variant === 'outline' ? 'transparent' : \n    '#0ea5e9'\n  };\n  color: ${props => \n    props.$variant === 'secondary' ? '#0f172a' : \n    props.$variant === 'outline' ? '#0ea5e9' : \n    'white'\n  };\n  border-color: ${props => props.$variant === 'outline' ? '#0ea5e9' : 'transparent'};\n  \n  &:hover:not(:disabled) {\n    background-color: ${props => \n      props.$variant === 'secondary' ? '#e2e8f0' : \n      props.$variant === 'outline' ? '#f0f9ff' : \n      '#0284c7'\n    };\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nexport const Button: React.FC<ButtonProps> = ({ variant = 'primary', size = 'md', children, ...props }) => {\n  return (\n    <StyledButton $variant={variant} $size={size} {...props}>\n      {children}\n    </StyledButton>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\n\nconst colors = {\n  neutral: { 200: '#e2e8f0', 900: '#0f172a' }\n};\n\nconst typography = {\n  fontFamily: { sans: ['Inter', 'system-ui', 'sans-serif'] },\n  fontSize: { lg: '1.125rem', base: '1rem' },\n  fontWeight: { semibold: 600, normal: 400 }\n};\n\nconst spacing = { 4: '1rem', 6: '1.5rem', 8: '2rem' };\n\nexport interface ModalProps {\n  isOpen: boolean;\n  onClose?: () => void;\n  children: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Overlay = styled.div<{ isOpen: boolean }>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: ${({ isOpen }) => (isOpen ? 'flex' : 'none')};\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n`;\n\nconst ModalContent = styled.div<{ size: 'sm' | 'md' | 'lg' }>`\n  background: white;\n  border-radius: ${spacing[4]};\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\n  max-height: 90vh;\n  overflow-y: auto;\n  \n  ${({ size }) => {\n    const sizes = {\n      sm: '400px',\n      md: '500px',\n      lg: '700px',\n    };\n    return `\n      width: 90vw;\n      max-width: ${sizes[size]};\n    `;\n  }}\n`;\n\nconst ModalHeader = styled.div`\n  padding: ${spacing[6]};\n  border-bottom: 1px solid ${colors.neutral[200]};\n  \n  h2 {\n    margin: 0;\n    font-family: ${typography.fontFamily.sans.join(', ')};\n    font-size: ${typography.fontSize.lg};\n    font-weight: ${typography.fontWeight.semibold};\n    color: ${colors.neutral[900]};\n  }\n`;\n\nconst ModalBody = styled.div`\n  padding: ${spacing[6]};\n  font-family: ${typography.fontFamily.sans.join(', ')};\n  font-size: ${typography.fontSize.base};\n  font-weight: ${typography.fontWeight.normal};\n  color: ${colors.neutral[900]};\n  line-height: 1.5;\n`;\n\nconst ModalFooter = styled.div`\n  padding: ${spacing[6]};\n  border-top: 1px solid ${colors.neutral[200]};\n  display: flex;\n  gap: ${spacing[4]};\n  justify-content: flex-end;\n`;\n\nexport const Modal: React.FC<ModalProps> & {\n  Header: typeof ModalHeader;\n  Body: typeof ModalBody;\n  Footer: typeof ModalFooter;\n} = ({ isOpen, onClose, children, size = 'md' }) => {\n  return (\n    <Overlay isOpen={isOpen} onClick={onClose}>\n      <ModalContent size={size} onClick={(e) => e.stopPropagation()}>\n        {children}\n      </ModalContent>\n    </Overlay>\n  );\n};\n\nModal.Header = ModalHeader;\nModal.Body = ModalBody;\nModal.Footer = ModalFooter;"],"names":[],"sourceRoot":""}